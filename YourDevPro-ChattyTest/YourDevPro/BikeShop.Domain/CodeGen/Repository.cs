	
using System;
using System.Linq;
using System.Text;
using System.Data;
using System.Collections.Generic;

namespace BikeShop.Domain
{
    public partial class Repository<T> where T : Entity<T>, new()
    {
        static T t = new T();

        public virtual T Single(int? id)
        {
            return t.Single(id);
        }
        public virtual T Single(string where = null, params object[] parms)
        {
            return t.Single(where, parms);
        }
        public virtual IEnumerable<T> All(string ids)
        {
            return t.All(ids);
        }
        public virtual IEnumerable<T> All(string where = null, string orderBy = null, int top = 0, params object[] parms)
        {
            return t.All(where, orderBy, top, parms);
        }
        public virtual IEnumerable<T> Paged(out int totalRows, string where = null, string orderBy = null, int page = 0, int pageSize = 20, params object[] parms)
        {
            return t.Paged(out totalRows, where, orderBy, page, pageSize, parms);
        }

        public virtual void Insert(T t)
        {
            t.Insert();
        }
        public virtual void Update(T t)
        {
            t.Update();
        }
        public virtual void Delete(T t)
        {
            t.Delete();
        }

        public virtual object Scalar(string operation, string column, string where = null, params object[] parms)
        {
            return t.Scalar(operation, column, where, parms);
        }
        public virtual int Count(string where = null, params object[] parms)
        {
            return t.Count(where, parms);
        }
        public virtual object Max(string column = null, string where = null, params object[] parms)
        {
            return t.Max(column, where, parms);
        }
        public virtual object Min(string column = null, string where = null, params object[] parms)
        {
            return t.Min(column, where, parms);
        }
        public virtual object Sum(string column, string where = null, params object[] parms)
        {
            return t.Sum(column, where, parms);
        }

        public virtual IEnumerable<T> Query(string sql, params object[] parms)
        {
            return t.Query(sql, parms);
        }
        public virtual void Execute(string sql, params object[] parms)
        {
            t.Execute(sql, parms);
        }
    }

    // ############################################################################
    // #
    // #        ---==>  T H I S  F I L E  W A S  G E N E R A T E D  <==---
    // #
    // # This file was generated by the CodeGen Prototype
    // # Generated on 3/21/2017 11:54:05 PM
    // #
    // # Edits to this file may cause incorrect behavior and will be lost
    // # if the code is regenerated.
    // #
    // ############################################################################
	
	// BikeShop Context. hosts all repositories

	public static class BikeShopContext
	{
		static Db db = new BikeShopDb();
		
		// entity specific repositories

        public static Carts Carts { get { return new Carts(); } }
        public static CartItems CartItems { get { return new CartItems(); } }
        public static Categories Categories { get { return new Categories(); } }
        public static Errors Errors { get { return new Errors(); } }
        public static Orders Orders { get { return new Orders(); } }
        public static OrderDetails OrderDetails { get { return new OrderDetails(); } }
        public static OrderNumbers OrderNumbers { get { return new OrderNumbers(); } }
        public static Products Products { get { return new Products(); } }
        public static Ratings Ratings { get { return new Ratings(); } }
        public static Users Users { get { return new Users(); } }
        public static Vendors Vendors { get { return new Vendors(); } }

		// general purpose operations

		public static void Execute(string sql, params object[] parms) { db.Execute( sql, parms ); }
		public static IEnumerable<dynamic> Query(string sql, params object[] parms) { return db.Query( sql, parms ); }
		public static object Scalar(string sql, params object[] parms) { return db.Scalar( sql, parms ); }

		public static DataSet GetDataSet(string sql, params object[] parms) { return db.GetDataSet( sql, parms ); }
		public static DataTable GetDataTable(string sql, params object[] parms) { return db.GetDataTable( sql, parms ); }
		public static DataRow GetDataRow(string sql, params object[] parms) { return db.GetDataRow( sql, parms ); }
	}
}
